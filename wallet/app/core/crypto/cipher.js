_$define("app/core/crypto/cipher", function (require, exports, module){
"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

Object.defineProperty(exports, "__esModule", { value: true });
/**
 *
 */
var sjcl_1 = require("../thirdparty/sjcl");

var Cipher = function () {
    // We prefer the default config
    function Cipher(mode, iter, adata, keySize, tagSize) {
        _classCallCheck(this, Cipher);

        this.config = {
            adata: adata || '',
            iter: iter || 10000,
            mode: mode || 'ccm',
            keySize: keySize || 128,
            tagSize: tagSize || 64
        };
    }
    /**
     * Encrypt the plain text, returning a JSON string
     *
     * @param  passwd Password used to encrypt the plainText
     * @param  plainText Text to be encrypted
     * @returns  JSON string
     */


    _createClass(Cipher, [{
        key: "encrypt",
        value: function encrypt(passwd, plainText) {
            return sjcl_1.sjcl.encrypt(passwd, plainText, this.config);
        }
        /**
         * Decypt the encrypted text by `encrypt` method
         *
         * @param  passwd Password to decrypt the cipherText
         * @param  cipherText Text to be decrypted. Generated by `encrypt` method
         * @returns  Decrypted plain text
         */

    }, {
        key: "decrypt",
        value: function decrypt(passwd, cipherText) {
            return sjcl_1.sjcl.decrypt(passwd, cipherText);
        }
        /**
         * sha256
         */

    }, {
        key: "sha256",
        value: function sha256(data) {
            return sjcl_1.sjcl.codec.hex.fromBits(sjcl_1.sjcl.hash.sha256.hash(data));
        }
    }]);

    return Cipher;
}();

exports.Cipher = Cipher;
})